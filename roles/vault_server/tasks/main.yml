---
- name: Install Vault
  ansible.builtin.apt:
    name: vault
    state: present
    update_cache: true

- name: Create Vault certs
  ansible.builtin.import_role:
    name: certs_server
  vars:
    owner: vault
    alt_names:
      - IP:127.0.0.1
      - 'IP:{{ ansible_host }}'
      - DNS:localhost
      - DNS:vault.service.consul
      - DNS:active.vault.service.consul
      - DNS:standby.vault.service.consul
      - 'DNS:vault.{{ external_domain }}'

- name: Copy Vault cert with private key cert combined
  ansible.builtin.shell:
    cmd: cat /etc/certs.d/private_key.pem /etc/certs.d/cert.pem > /etc/certs.d/cert_combined.pem
    creates: /etc/certs.d/cert_combined.pem

- name: Create Consul Vault token
  ansible.builtin.import_role:
    name: consul_token
  vars:
    token_file: /etc/vault.d/consul_token.txt
    policy_name: vault-server
    policy_rules: |
      service "vault" {
        policy = "write"
      }

# - name: Read Consul management token
#   ansible.builtin.set_fact:
#     consul_management_token: '{{ lookup("file", ".tmp/root_token_consul.txt") }}'

# - name: Check Consul Vault policy
#   run_once: true
#   delegate_to: consul-server1
#   ansible.builtin.command:
#     consul acl policy read -token {{ consul_management_token }} -name vault-server -format json
#   failed_when: false
#   register: check_consul_policy

# - name: Create Consul Vault acl policy
#   when: check_consul_policy.rc != 0
#   delegate_to: consul-server1
#   run_once: true
#   ansible.builtin.command:
#     stdin: |
#       service "vault" {
#         policy = "write"
#       }
#     cmd:
#       consul acl policy create
#         -token={{ consul_management_token }}
#         -name=vault-server
#         -format=json
#         -rules -
#   register: consul_acl_policy
#   changed_when:
#     'consul_acl_policy.rc == 0 and "ID" in consul_acl_policy.stdout'
#   failed_when:
#     'consul_acl_policy.rc != 0 and "already exists" not in consul_acl_policy.stderr'

# - name: Check Consul Vault token
#   ansible.builtin.stat:
#     path: /etc/vault.d/consul_token.txt
#   register: check_consul_token

# - name: Create Consul Vault token
#   when: not check_consul_token.stat.exists
#   delegate_to: consul-server1
#   ansible.builtin.shell:
#     cmd:
#       consul acl token create
#         -token={{ consul_management_token }}
#         -policy-name=vault-server
#         -secret={{ (ansible_hostname + ".node.consul") | to_uuid(namespace="6ba7b810-9dad-11d1-80b4-00c04fd430c8") }}
#         -format=json
#     creates: /etc/vault.d/consul_token.txt
#   register: consul_acl_token_result
#   changed_when: consul_acl_token_result.rc == 0

# - name: Save Consul Vault token
#   when: consul_acl_token_result.changed
#   ansible.builtin.copy:
#     content: '{{ "SecretID" | extract(consul_acl_token_result.stdout | from_json) }}'
#     dest: /etc/vault.d/consul_token.txt

- name: Read Consul Vault token
  ansible.builtin.slurp:
    path: /etc/vault.d/consul_token.txt
  register: read_consul_token

- name: Copy Vault config
  ansible.builtin.template:
    src: vault.hcl.j2
    dest: /etc/vault.d/vault.hcl
    owner: vault
    mode: 0600
  vars:
    consul_token: '{{ read_consul_token.content | b64decode }}'
  notify: Restart Vault
